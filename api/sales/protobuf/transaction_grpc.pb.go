// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/sales/proto/transaction.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	GetAllTransaction(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	GetTransactionById(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	CreateTransaction(ctx context.Context, in *TransactionEntity, opts ...grpc.CallOption) (*TransactionResponse, error)
	UpdateTransaction(ctx context.Context, in *TransactionEntity, opts ...grpc.CallOption) (*TransactionResponse, error)
	DeleteTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetAllCustomerRequest(ctx context.Context, in *CustomerRequestsRequest, opts ...grpc.CallOption) (*CustomerRequestsResponse, error)
	GetCustomerRequestByRequestNumber(ctx context.Context, in *CustomerRequestRequest, opts ...grpc.CallOption) (*CustomerRequestResponse, error)
	CreateCustomerRequest(ctx context.Context, in *CustomerRequestEntity, opts ...grpc.CallOption) (*CustomerRequestResponse, error)
	UpdateCustomerRequest(ctx context.Context, in *CustomerRequestEntity, opts ...grpc.CallOption) (*CustomerRequestResponse, error)
	DeleteCustomerRequest(ctx context.Context, in *CustomerRequestRequest, opts ...grpc.CallOption) (*CustomerRequestResponse, error)
	GetAllCustomer(ctx context.Context, in *CustomersRequest, opts ...grpc.CallOption) (*CustomersResponse, error)
	GetCustomerById(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
	CreateCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerResponse, error)
	DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetAllPayment(ctx context.Context, in *PaymentsRequest, opts ...grpc.CallOption) (*PaymentsResponse, error)
	GetPaymentById(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	CreatePayment(ctx context.Context, in *PaymentEntity, opts ...grpc.CallOption) (*PaymentResponse, error)
	UpdatePayment(ctx context.Context, in *PaymentEntity, opts ...grpc.CallOption) (*PaymentResponse, error)
	DeletePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	GetAllInvoice(ctx context.Context, in *InvoicesRequest, opts ...grpc.CallOption) (*InvoicesResponse, error)
	GetInvoiceByInvoiceNumber(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	CreateInvoice(ctx context.Context, in *InvoiceEntity, opts ...grpc.CallOption) (*InvoiceResponse, error)
	UpdateInvoice(ctx context.Context, in *InvoiceEntity, opts ...grpc.CallOption) (*InvoiceResponse, error)
	DeleteInvoice(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	GetAllTransactionDetail(ctx context.Context, in *TransactionDetailsRequest, opts ...grpc.CallOption) (*TransactionDetailsResponse, error)
	GetTransactionDetailById(ctx context.Context, in *TransactionDetailRequest, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	CreateTransactionDetail(ctx context.Context, in *TransactionDetailEntity, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	UpdateTransactionDetail(ctx context.Context, in *TransactionDetailEntity, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	DeleteTransactionDetail(ctx context.Context, in *TransactionDetailRequest, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetAllTransaction(ctx context.Context, in *TransactionsRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetAllTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionById(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *TransactionEntity, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, in *TransactionEntity, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/UpdateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/DeleteTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetAllCustomerRequest(ctx context.Context, in *CustomerRequestsRequest, opts ...grpc.CallOption) (*CustomerRequestsResponse, error) {
	out := new(CustomerRequestsResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetAllCustomerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetCustomerRequestByRequestNumber(ctx context.Context, in *CustomerRequestRequest, opts ...grpc.CallOption) (*CustomerRequestResponse, error) {
	out := new(CustomerRequestResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetCustomerRequestByRequestNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateCustomerRequest(ctx context.Context, in *CustomerRequestEntity, opts ...grpc.CallOption) (*CustomerRequestResponse, error) {
	out := new(CustomerRequestResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/CreateCustomerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateCustomerRequest(ctx context.Context, in *CustomerRequestEntity, opts ...grpc.CallOption) (*CustomerRequestResponse, error) {
	out := new(CustomerRequestResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/UpdateCustomerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteCustomerRequest(ctx context.Context, in *CustomerRequestRequest, opts ...grpc.CallOption) (*CustomerRequestResponse, error) {
	out := new(CustomerRequestResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/DeleteCustomerRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetAllCustomer(ctx context.Context, in *CustomersRequest, opts ...grpc.CallOption) (*CustomersResponse, error) {
	out := new(CustomersResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetAllCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetCustomerById(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetCustomerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateCustomer(ctx context.Context, in *CustomerEntity, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetAllPayment(ctx context.Context, in *PaymentsRequest, opts ...grpc.CallOption) (*PaymentsResponse, error) {
	out := new(PaymentsResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetAllPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetPaymentById(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetPaymentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreatePayment(ctx context.Context, in *PaymentEntity, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdatePayment(ctx context.Context, in *PaymentEntity, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeletePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetAllInvoice(ctx context.Context, in *InvoicesRequest, opts ...grpc.CallOption) (*InvoicesResponse, error) {
	out := new(InvoicesResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetAllInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetInvoiceByInvoiceNumber(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetInvoiceByInvoiceNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateInvoice(ctx context.Context, in *InvoiceEntity, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateInvoice(ctx context.Context, in *InvoiceEntity, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/UpdateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteInvoice(ctx context.Context, in *InvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/DeleteInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetAllTransactionDetail(ctx context.Context, in *TransactionDetailsRequest, opts ...grpc.CallOption) (*TransactionDetailsResponse, error) {
	out := new(TransactionDetailsResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetAllTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionDetailById(ctx context.Context, in *TransactionDetailRequest, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/GetTransactionDetailById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransactionDetail(ctx context.Context, in *TransactionDetailEntity, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/CreateTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateTransactionDetail(ctx context.Context, in *TransactionDetailEntity, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/UpdateTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteTransactionDetail(ctx context.Context, in *TransactionDetailRequest, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/invoice.TransactionService/DeleteTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility
type TransactionServiceServer interface {
	GetAllTransaction(context.Context, *TransactionsRequest) (*TransactionsResponse, error)
	GetTransactionById(context.Context, *TransactionRequest) (*TransactionResponse, error)
	CreateTransaction(context.Context, *TransactionEntity) (*TransactionResponse, error)
	UpdateTransaction(context.Context, *TransactionEntity) (*TransactionResponse, error)
	DeleteTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error)
	GetAllCustomerRequest(context.Context, *CustomerRequestsRequest) (*CustomerRequestsResponse, error)
	GetCustomerRequestByRequestNumber(context.Context, *CustomerRequestRequest) (*CustomerRequestResponse, error)
	CreateCustomerRequest(context.Context, *CustomerRequestEntity) (*CustomerRequestResponse, error)
	UpdateCustomerRequest(context.Context, *CustomerRequestEntity) (*CustomerRequestResponse, error)
	DeleteCustomerRequest(context.Context, *CustomerRequestRequest) (*CustomerRequestResponse, error)
	GetAllCustomer(context.Context, *CustomersRequest) (*CustomersResponse, error)
	GetCustomerById(context.Context, *CustomerRequest) (*CustomerResponse, error)
	CreateCustomer(context.Context, *CustomerEntity) (*CustomerResponse, error)
	UpdateCustomer(context.Context, *CustomerEntity) (*CustomerResponse, error)
	DeleteCustomer(context.Context, *CustomerRequest) (*CustomerResponse, error)
	GetAllPayment(context.Context, *PaymentsRequest) (*PaymentsResponse, error)
	GetPaymentById(context.Context, *PaymentRequest) (*PaymentResponse, error)
	CreatePayment(context.Context, *PaymentEntity) (*PaymentResponse, error)
	UpdatePayment(context.Context, *PaymentEntity) (*PaymentResponse, error)
	DeletePayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	GetAllInvoice(context.Context, *InvoicesRequest) (*InvoicesResponse, error)
	GetInvoiceByInvoiceNumber(context.Context, *InvoiceRequest) (*InvoiceResponse, error)
	CreateInvoice(context.Context, *InvoiceEntity) (*InvoiceResponse, error)
	UpdateInvoice(context.Context, *InvoiceEntity) (*InvoiceResponse, error)
	DeleteInvoice(context.Context, *InvoiceRequest) (*InvoiceResponse, error)
	GetAllTransactionDetail(context.Context, *TransactionDetailsRequest) (*TransactionDetailsResponse, error)
	GetTransactionDetailById(context.Context, *TransactionDetailRequest) (*TransactionDetailResponse, error)
	CreateTransactionDetail(context.Context, *TransactionDetailEntity) (*TransactionDetailResponse, error)
	UpdateTransactionDetail(context.Context, *TransactionDetailEntity) (*TransactionDetailResponse, error)
	DeleteTransactionDetail(context.Context, *TransactionDetailRequest) (*TransactionDetailResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (UnimplementedTransactionServiceServer) GetAllTransaction(context.Context, *TransactionsRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionById(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedTransactionServiceServer) CreateTransaction(context.Context, *TransactionEntity) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateTransaction(context.Context, *TransactionEntity) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteTransaction(context.Context, *TransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) GetAllCustomerRequest(context.Context, *CustomerRequestsRequest) (*CustomerRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomerRequest not implemented")
}
func (UnimplementedTransactionServiceServer) GetCustomerRequestByRequestNumber(context.Context, *CustomerRequestRequest) (*CustomerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRequestByRequestNumber not implemented")
}
func (UnimplementedTransactionServiceServer) CreateCustomerRequest(context.Context, *CustomerRequestEntity) (*CustomerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerRequest not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateCustomerRequest(context.Context, *CustomerRequestEntity) (*CustomerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerRequest not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteCustomerRequest(context.Context, *CustomerRequestRequest) (*CustomerRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerRequest not implemented")
}
func (UnimplementedTransactionServiceServer) GetAllCustomer(context.Context, *CustomersRequest) (*CustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomer not implemented")
}
func (UnimplementedTransactionServiceServer) GetCustomerById(context.Context, *CustomerRequest) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (UnimplementedTransactionServiceServer) CreateCustomer(context.Context, *CustomerEntity) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateCustomer(context.Context, *CustomerEntity) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteCustomer(context.Context, *CustomerRequest) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedTransactionServiceServer) GetAllPayment(context.Context, *PaymentsRequest) (*PaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPayment not implemented")
}
func (UnimplementedTransactionServiceServer) GetPaymentById(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentById not implemented")
}
func (UnimplementedTransactionServiceServer) CreatePayment(context.Context, *PaymentEntity) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedTransactionServiceServer) UpdatePayment(context.Context, *PaymentEntity) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedTransactionServiceServer) DeletePayment(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayment not implemented")
}
func (UnimplementedTransactionServiceServer) GetAllInvoice(context.Context, *InvoicesRequest) (*InvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInvoice not implemented")
}
func (UnimplementedTransactionServiceServer) GetInvoiceByInvoiceNumber(context.Context, *InvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceByInvoiceNumber not implemented")
}
func (UnimplementedTransactionServiceServer) CreateInvoice(context.Context, *InvoiceEntity) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateInvoice(context.Context, *InvoiceEntity) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteInvoice(context.Context, *InvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoice not implemented")
}
func (UnimplementedTransactionServiceServer) GetAllTransactionDetail(context.Context, *TransactionDetailsRequest) (*TransactionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactionDetail not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransactionDetailById(context.Context, *TransactionDetailRequest) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetailById not implemented")
}
func (UnimplementedTransactionServiceServer) CreateTransactionDetail(context.Context, *TransactionDetailEntity) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionDetail not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateTransactionDetail(context.Context, *TransactionDetailEntity) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionDetail not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteTransactionDetail(context.Context, *TransactionDetailRequest) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionDetail not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_GetAllTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetAllTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllTransaction(ctx, req.(*TransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionById(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*TransactionEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, req.(*TransactionEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/DeleteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetAllCustomerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllCustomerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetAllCustomerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllCustomerRequest(ctx, req.(*CustomerRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetCustomerRequestByRequestNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetCustomerRequestByRequestNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetCustomerRequestByRequestNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetCustomerRequestByRequestNumber(ctx, req.(*CustomerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateCustomerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateCustomerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/CreateCustomerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateCustomerRequest(ctx, req.(*CustomerRequestEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateCustomerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateCustomerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/UpdateCustomerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateCustomerRequest(ctx, req.(*CustomerRequestEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteCustomerRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteCustomerRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/DeleteCustomerRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteCustomerRequest(ctx, req.(*CustomerRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetAllCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetAllCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllCustomer(ctx, req.(*CustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetCustomerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetCustomerById(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateCustomer(ctx, req.(*CustomerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateCustomer(ctx, req.(*CustomerEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetAllPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetAllPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllPayment(ctx, req.(*PaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetPaymentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetPaymentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetPaymentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetPaymentById(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreatePayment(ctx, req.(*PaymentEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdatePayment(ctx, req.(*PaymentEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeletePayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetAllInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetAllInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllInvoice(ctx, req.(*InvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetInvoiceByInvoiceNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetInvoiceByInvoiceNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetInvoiceByInvoiceNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetInvoiceByInvoiceNumber(ctx, req.(*InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateInvoice(ctx, req.(*InvoiceEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/UpdateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateInvoice(ctx, req.(*InvoiceEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/DeleteInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteInvoice(ctx, req.(*InvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetAllTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetAllTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetAllTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetAllTransactionDetail(ctx, req.(*TransactionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionDetailById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionDetailById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/GetTransactionDetailById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionDetailById(ctx, req.(*TransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetailEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/CreateTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransactionDetail(ctx, req.(*TransactionDetailEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetailEntity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/UpdateTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateTransactionDetail(ctx, req.(*TransactionDetailEntity))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoice.TransactionService/DeleteTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteTransactionDetail(ctx, req.(*TransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTransaction",
			Handler:    _TransactionService_GetAllTransaction_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _TransactionService_GetTransactionById_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _TransactionService_UpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _TransactionService_DeleteTransaction_Handler,
		},
		{
			MethodName: "GetAllCustomerRequest",
			Handler:    _TransactionService_GetAllCustomerRequest_Handler,
		},
		{
			MethodName: "GetCustomerRequestByRequestNumber",
			Handler:    _TransactionService_GetCustomerRequestByRequestNumber_Handler,
		},
		{
			MethodName: "CreateCustomerRequest",
			Handler:    _TransactionService_CreateCustomerRequest_Handler,
		},
		{
			MethodName: "UpdateCustomerRequest",
			Handler:    _TransactionService_UpdateCustomerRequest_Handler,
		},
		{
			MethodName: "DeleteCustomerRequest",
			Handler:    _TransactionService_DeleteCustomerRequest_Handler,
		},
		{
			MethodName: "GetAllCustomer",
			Handler:    _TransactionService_GetAllCustomer_Handler,
		},
		{
			MethodName: "GetCustomerById",
			Handler:    _TransactionService_GetCustomerById_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _TransactionService_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _TransactionService_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _TransactionService_DeleteCustomer_Handler,
		},
		{
			MethodName: "GetAllPayment",
			Handler:    _TransactionService_GetAllPayment_Handler,
		},
		{
			MethodName: "GetPaymentById",
			Handler:    _TransactionService_GetPaymentById_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _TransactionService_CreatePayment_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _TransactionService_UpdatePayment_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _TransactionService_DeletePayment_Handler,
		},
		{
			MethodName: "GetAllInvoice",
			Handler:    _TransactionService_GetAllInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceByInvoiceNumber",
			Handler:    _TransactionService_GetInvoiceByInvoiceNumber_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _TransactionService_CreateInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _TransactionService_UpdateInvoice_Handler,
		},
		{
			MethodName: "DeleteInvoice",
			Handler:    _TransactionService_DeleteInvoice_Handler,
		},
		{
			MethodName: "GetAllTransactionDetail",
			Handler:    _TransactionService_GetAllTransactionDetail_Handler,
		},
		{
			MethodName: "GetTransactionDetailById",
			Handler:    _TransactionService_GetTransactionDetailById_Handler,
		},
		{
			MethodName: "CreateTransactionDetail",
			Handler:    _TransactionService_CreateTransactionDetail_Handler,
		},
		{
			MethodName: "UpdateTransactionDetail",
			Handler:    _TransactionService_UpdateTransactionDetail_Handler,
		},
		{
			MethodName: "DeleteTransactionDetail",
			Handler:    _TransactionService_DeleteTransactionDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sales/proto/transaction.proto",
}
