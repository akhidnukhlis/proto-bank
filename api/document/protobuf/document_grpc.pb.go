// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/document.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Document_StoreDocument_FullMethodName           = "/Document/StoreDocument"
	Document_GetDocumentByReffNumber_FullMethodName = "/Document/GetDocumentByReffNumber"
)

// DocumentClient is the client API for Document service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentClient interface {
	StoreDocument(ctx context.Context, in *UploadDocRequest, opts ...grpc.CallOption) (*UploadDocResponse, error)
	GetDocumentByReffNumber(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
}

type documentClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentClient(cc grpc.ClientConnInterface) DocumentClient {
	return &documentClient{cc}
}

func (c *documentClient) StoreDocument(ctx context.Context, in *UploadDocRequest, opts ...grpc.CallOption) (*UploadDocResponse, error) {
	out := new(UploadDocResponse)
	err := c.cc.Invoke(ctx, Document_StoreDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) GetDocumentByReffNumber(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, Document_GetDocumentByReffNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServer is the server API for Document service.
// All implementations must embed UnimplementedDocumentServer
// for forward compatibility
type DocumentServer interface {
	StoreDocument(context.Context, *UploadDocRequest) (*UploadDocResponse, error)
	GetDocumentByReffNumber(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	mustEmbedUnimplementedDocumentServer()
}

// UnimplementedDocumentServer must be embedded to have forward compatible implementations.
type UnimplementedDocumentServer struct {
}

func (UnimplementedDocumentServer) StoreDocument(context.Context, *UploadDocRequest) (*UploadDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreDocument not implemented")
}
func (UnimplementedDocumentServer) GetDocumentByReffNumber(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentByReffNumber not implemented")
}
func (UnimplementedDocumentServer) mustEmbedUnimplementedDocumentServer() {}

// UnsafeDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServer will
// result in compilation errors.
type UnsafeDocumentServer interface {
	mustEmbedUnimplementedDocumentServer()
}

func RegisterDocumentServer(s grpc.ServiceRegistrar, srv DocumentServer) {
	s.RegisterService(&Document_ServiceDesc, srv)
}

func _Document_StoreDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).StoreDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Document_StoreDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).StoreDocument(ctx, req.(*UploadDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_GetDocumentByReffNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).GetDocumentByReffNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Document_GetDocumentByReffNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).GetDocumentByReffNumber(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Document_ServiceDesc is the grpc.ServiceDesc for Document service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Document_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Document",
	HandlerType: (*DocumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreDocument",
			Handler:    _Document_StoreDocument_Handler,
		},
		{
			MethodName: "GetDocumentByReffNumber",
			Handler:    _Document_GetDocumentByReffNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/document.proto",
}
